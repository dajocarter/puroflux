import { GetStaticProps, GetStaticPropsContext } from 'next'
import Head from 'next/head'
import {
  HeroContent,
  HeroContentProps,
  HeroUnit
} from '../components/hero-unit'
import Layout from '../components/layout'
import { wpClient } from '../data'
import getLayoutData from '../data/layout'
import styled from 'styled-components'
import { Col, Container, Row } from 'react-bootstrap'
import { getPageData } from '../data/page'
import { HeaderProps } from '../components/header'
import { FooterProps } from '../components/footer'

interface PageProps {
  header: HeaderProps
  footer: FooterProps
  heroImg: {
    media_details: {
      sizes: {
        full: {
          source_url: string
        }
      }
    }
  }
  page: {
    content: {
      rendered: string
    }
    acf: HeroContentProps
  }
}

export default function Page(props: PageProps) {
  return (
    <Layout {...props}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <HeroUnit imgSrc={props.heroImg.media_details.sizes.full.source_url}>
        <HeroContent
          content={props.page.acf.content}
          buttons={props.page.acf.buttons}
        />
      </HeroUnit>
      {props.page.content.rendered && (
        <Main>
          <Row>
            <Col xs={12}>
              <Content
                dangerouslySetInnerHTML={{
                  __html: props.page.content.rendered
                }}
              />
            </Col>
          </Row>
        </Main>
      )}
    </Layout>
  )
}

export async function getStaticPaths() {
  const pages = await wpClient.page().find()
  const paths = pages.map((page) => ({
    params: { slug: page?.slug }
  }))
  return {
    paths,
    fallback: false
  }
}

export const getStaticProps: GetStaticProps = async (
  context: GetStaticPropsContext
) => {
  const layoutData = await getLayoutData()

  if (!context.params) return { notFound: true }
  let slug =
    (Array.isArray(context.params.slug)
      ? context.params.slug[0]
      : context.params.slug) || ''
  const pageData = await getPageData(slug)

  return {
    props: {
      ...layoutData,
      ...pageData
    }
  }
}

const Main = styled(Container)`
  padding: 45px 15px;
`

const Content = styled.div`
  color: ${({ theme }) => theme.body};
  margin: 0 auto;
  max-width: 960px;
  padding: 45px 15px;

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    color: ${({ theme }) => theme.primary};
  }
`

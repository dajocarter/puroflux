import { GetStaticProps, GetStaticPropsContext } from 'next'
import Head from 'next/head'
import {
  HeroContent,
  HeroContentProps,
  HeroUnit
} from '../components/hero-unit'
import Layout from '../components/layout'
import { formatPhoneNumber } from '../data'
import getLayoutData from '../data/layout'
import styled from 'styled-components'
import { Col, Container, Row } from 'react-bootstrap'
import { getPageData } from '../data/page'
import { HeaderProps } from '../components/header'
import { FooterProps } from '../components/footer'
import ContactForm from '../components/forms/contact'

interface ContactPageProps {
  header: HeaderProps
  footer: FooterProps
  heroImg: {
    media_details: {
      sizes: {
        full: {
          source_url: string
        }
      }
    }
  }
  page: {
    content: {
      rendered: string
    }
    acf: HeroContentProps & {
      address: string
      phone_number: string
      fax_number: string
      contact_email: string
    }
  }
}

export default function ContactPage(props: ContactPageProps) {
  return (
    <Layout {...props}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <HeroUnit imgSrc={props.heroImg.media_details.sizes.full.source_url}>
        <HeroContent
          content={props.page.acf.content}
          buttons={props.page.acf.buttons}
        />
      </HeroUnit>
      <Main>
        <Row>
          <Col md={5}>
            <ColumnTitle>Contact Information</ColumnTitle>
            <GMap>
              <iframe
                src='https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3296.9867927125356!2d-118.80215204942941!3d34.27438898045055!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x80c282bad55e5c73%3A0xe389b73478d03800!2sPuroflux+Corporation!5e0!3m2!1sen!2sus!4v1535824827764'
                width='600'
                height='450'
                frameBorder='0'
                style={{ border: 0 }}
                title='map'
                allowFullScreen
              />
            </GMap>
            <Address
              dangerouslySetInnerHTML={{ __html: props.page.acf.address }}
            />
            <p>
              <Title>Tel:</Title>
              <Value
                href={`tel:${formatPhoneNumber(
                  props.page.acf.phone_number,
                  'back'
                )}`}
              >
                {formatPhoneNumber(props.page.acf.phone_number, 'front')}
              </Value>{' '}
              <br />
              <Title>Fax:</Title>
              <Value
                href={`tel:${formatPhoneNumber(
                  props.page.acf.fax_number,
                  'back'
                )}`}
              >
                {formatPhoneNumber(props.page.acf.fax_number, 'front')}
              </Value>{' '}
              <br />
              <Title>Email:</Title>
              <Value href={`mailto:${props.page.acf.contact_email}`}>
                {props.page.acf.contact_email}
              </Value>
            </p>
          </Col>
          <Col md={{ span: 5, offset: 2 }}>
            <ColumnTitle>Contact Form</ColumnTitle>
            <ContactForm />
          </Col>
        </Row>
      </Main>
    </Layout>
  )
}

export const getStaticProps: GetStaticProps = async (
  context: GetStaticPropsContext
) => {
  const layoutData = await getLayoutData()
  const pageData = await getPageData('contact')

  return {
    props: {
      ...layoutData,
      ...pageData
    }
  }
}

const Main = styled(Container)`
  padding: 45px 15px;
`

const ColumnTitle = styled.h2`
  border-bottom: 1px solid black;
  margin-bottom: 2rem;
  padding-bottom: 0.75rem;
`

const GMap = styled.div`
  iframe {
    display: block;
    margin-left: auto;
    margin-right: auto;
    max-width: 100%;
  }
`

const Address = styled.p`
  margin-top: 1rem;
`

const Title = styled.span`
  color: ${({ theme }) => theme.primary};
`

const Value = styled.a`
  color: black;
  margin-left: 5px;
  text-decoration: underline;

  &:hover,
  &:focus {
    color: black;
  }
`

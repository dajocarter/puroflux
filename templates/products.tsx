import Head from 'next/head'
import {
  HeroContent,
  HeroContentProps,
  HeroUnit
} from '../components/hero-unit'
import Layout from '../components/layout'
import styled, { css } from 'styled-components'
import Container from 'react-bootstrap/Container'
import Row from 'react-bootstrap/Row'
import Col from 'react-bootstrap/Col'
import Nav from 'react-bootstrap/Nav'
import TabContainer from 'react-bootstrap/TabContainer'
import TabContent from 'react-bootstrap/TabContent'
import TabPane from 'react-bootstrap/TabPane'
import { PageProps } from '../pages/[slug]'
import Image from 'next/image'
import { useRef, useState } from 'react'
import { StyledButtonLink } from '../components/links'
import { FaArrowLeft, FaArrowRight, FaTimes } from 'react-icons/fa'
import ProductNav from '../components/product-nav'
import {
  EmbeddedFeaturedMedia,
  ProductPostType,
  WordPressPage
} from '../data/types'
import { getImageData } from '../data'

interface ProductsPage extends WordPressPage {
  template: 'page_products.php'
  acf: HeroContentProps & {
    excerpt?: string
  }
}
interface AdditionalItem extends WordPressPage {
  _embedded: EmbeddedFeaturedMedia
}
export interface ProductsPageProps extends PageProps {
  page: ProductsPage
  addlItem: AdditionalItem
  products: ProductPostType[]
}

export default function ProductsPageTemplate(props: ProductsPageProps) {
  const [key, setKey] = useState<number>()
  const panesRef = useRef<HTMLDivElement>(null)
  const tabsRef = useRef<HTMLDivElement>(null)

  const prevPane = () => {
    if (panesRef.current)
      panesRef.current.scrollIntoView({ behavior: 'smooth' })
    setKey((prevKey) => (prevKey ? prevKey - 1 : undefined))
  }

  const nextPane = () => {
    if (panesRef.current)
      panesRef.current.scrollIntoView({ behavior: 'smooth' })
    setKey((prevKey) => (prevKey ? prevKey + 1 : undefined))
  }

  const setPane = (key: string | null) => {
    if (panesRef.current)
      panesRef.current.scrollIntoView({ behavior: 'smooth' })
    if (key) setKey(parseInt(key))
  }

  const closePane = () => {
    if (tabsRef.current) tabsRef.current.scrollIntoView({ behavior: 'smooth' })
    setKey(undefined)
  }

  const addlItemImage = getImageData(
    props.addlItem._embedded['wp:featuredmedia'][0]
  )

  return (
    <Layout {...props}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <HeroUnit imgSrc={props.heroImg.media_details.sizes.full.source_url}>
        <HeroContent
          content={props.page.acf.content}
          buttons={props.page.acf.buttons}
        />
      </HeroUnit>
      <Main>
        <Row>
          <Col xs={12}>
            <ProductNav products={props.products} />
          </Col>
        </Row>
        {props.products && props.addlItem && (
          <TabContainer
            id='product-selector'
            activeKey={key}
            onSelect={(key) => setPane(key)}
          >
            <Row ref={tabsRef}>
              <Col xs={12}>
                <Tabs>
                  {props.products.map((product, index) => {
                    const { imgAlt, imgSrc, imgHeight, imgWidth } =
                      getImageData(product._embedded['wp:featuredmedia'][0])
                    return (
                      <Nav.Item key={product.id}>
                        <Nav.Link eventKey={index}>
                          <Image
                            alt={imgAlt}
                            src={imgSrc}
                            height={imgHeight}
                            width={imgWidth}
                          />
                        </Nav.Link>
                      </Nav.Item>
                    )
                  })}
                  <Nav.Item>
                    <Nav.Link eventKey={props.products.length}>
                      <Image
                        alt={addlItemImage.imgAlt}
                        src={addlItemImage.imgSrc}
                        height={addlItemImage.imgHeight}
                        width={addlItemImage.imgWidth}
                      />
                    </Nav.Link>
                  </Nav.Item>
                </Tabs>
              </Col>
            </Row>
            <Row ref={panesRef}>
              <Col xs={12}>
                <TabContent>
                  {props.products.map((product, index) => (
                    <SelectablePane
                      key={product.id}
                      node={product}
                      eventKey={index}
                      closePane={closePane}
                      next
                      nextPane={nextPane}
                      prev={index > 0}
                      prevPane={prevPane}
                    />
                  ))}
                  <SelectablePane
                    node={props.addlItem}
                    eventKey={props.products.length}
                    closePane={closePane}
                    next={false}
                    nextPane={nextPane}
                    prev={true}
                    prevPane={prevPane}
                  />
                </TabContent>
              </Col>
            </Row>
          </TabContainer>
        )}
      </Main>
    </Layout>
  )
}

type PaneNode = ProductPostType | ProductsPageProps['addlItem']

function SelectablePane({
  node,
  eventKey,
  closePane,
  next,
  nextPane,
  prev,
  prevPane
}: {
  node: PaneNode
  eventKey: number
  closePane: () => void
  next: boolean
  nextPane: () => void
  prev: boolean
  prevPane: () => void
}) {
  const { imgAlt, imgSrc, imgHeight, imgWidth } = getImageData(
    node._embedded['wp:featuredmedia'][0]
  )
  return (
    <TabPane eventKey={eventKey}>
      <Pane>
        <Image alt={imgAlt} src={imgSrc} height={imgHeight} width={imgWidth} />
        <div>
          <h2>{node.title.rendered}</h2>
          {node.type === 'product' && node.acf.excerpt && (
            <p
              dangerouslySetInnerHTML={{
                __html: node.acf.excerpt
              }}
            />
          )}
          {node.type === 'page' && (
            <p
              dangerouslySetInnerHTML={{
                __html: node?.excerpt?.rendered
              }}
            />
          )}
          <StyledButtonLink href={node.slug}>Learn More</StyledButtonLink>
          <CloseIcon onClick={closePane} />
          <Arrows>
            {prev && <LeftArrow onClick={prevPane} />}
            {next && <RightArrow onClick={nextPane} />}
          </Arrows>
        </div>
      </Pane>
    </TabPane>
  )
}

const Main = styled(Container)`
  padding: 45px 15px;
`

const Tabs = styled(Nav)`
  &.nav {
    margin-top: 3rem;
    margin-bottom: 3rem;
    display: grid;
    grid-gap: 1rem;
    grid-template-columns: repeat(1, 1fr);

    @media (min-width: 768px) {
      grid-template-columns: repeat(2, 1fr);
    }

    @media (min-width: 991px) {
      grid-template-columns: repeat(3, 1fr);
    }
  }

  .nav-link {
    padding: 0;
  }
`

const Pane = styled.div`
  display: grid;
  grid-gap: 1rem;
  align-items: center;
  grid-template-columns: 1fr;
  position: relative;

  @media (max-width: 990px) {
    margin-top: 2rem;
  }

  @media (min-width: 991px) {
    grid-template-columns: minmax(600px, 1fr) 1fr;
  }
`

const Icon = css`
  color: ${({ theme }) => theme.secondary};
  font-size: 1.25rem;
  cursor: pointer;
`

const CloseIcon = styled(FaTimes)`
  position: absolute;
  top: 0;
  right: 1rem;
  ${Icon};
`

const Arrows = styled.div`
  position: absolute;
  bottom: 0;
  right: 1rem;
  display: grid;
  grid-gap: 1rem;
  grid-template-columns: 1fr 1fr;
`

const LeftArrow = styled(FaArrowLeft)`
  ${Icon};
`

const RightArrow = styled(FaArrowRight)`
  ${Icon};
`
